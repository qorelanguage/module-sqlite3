/** @mainpage Qore sqlite3 Module

    @tableofcontents

    Contents of this documentation:
    - @ref sqlite3intro

    @section sqlite3intro Introduction to the sqlite3 Module

    The \c sqlite3 module provides an <a href="https://www.sqlite.org/index.html">SQLite v3</a> driver to %Qore, allowing
    %Qore programs to access SQLite3 database files and/or in-memory databases through the \c %Datasource and
    \c %DatasourcePool classes.

    This module is released under a choice of two licenses:
    - <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html">LGPL 2.1</a>
    - MIT (see COPYING.MIT in the source distribution for more information)
    .
    The module is tagged as such in the module's header (meaning it can be loaded unconditionally regardless of how
    the %Qore library was initialized).

    Example of creating a SQLite Datasource:
    @code
# user and password are not present as they are ignored
Datasource ds("sqlite3:@/tmp/my-file.sqlite(utf8)");
    @endcode

    The DB name can be a real path to an SQLite3 DB file or the \c ":memory:" string to use an empty in-memory
    database. Please refer to the SQLite3 documentation for more information on how the SQLite library opens
    databases.

    This driver supports the following DBI capabilities:
    - \c DBI_CAP_TRANSACTION_MANAGEMENT
    - \c DBI_CAP_CHARSET_SUPPORT
    - \c DBI_CAP_LOB_SUPPORT
    - \c DBI_CAP_BIND_BY_VALUE
    - \c DBI_CAP_HAS_EXECRAW
    - \c DBI_CAP_HAS_STATEMENT
    - \c DBI_CAP_HAS_NUMBER_SUPPORT

    The driver employs efficient binary bindings for all supported data types when selecting and binding by value.

    The \c Datasource::getServerVersion() method is implemented for this driver and returns a string in
    \c MAJOR.MINOR.PATCH notation - e.g. \c "3.6.7".  \c Datasource::getClientVersion() returns the same information.

    Like all Qore components, the \c sqlite3 driver is thread-safe.

    @subsection sqlite3_binding_by_value Binding By Value

    SQLite implements different data type handling compared to other DB servers and engines.  Please refer to the
    SQLite documentation in this case as well.

    Data taken from SQLite is converted as follows:
    |!Sqlite3 Column Affinity|!%Qore type|!Description
    |\c INTEGER|\c Type::Int|For integer data
    |\c FLOAT|\c Type::Float|Floating-point data
    |\c TEXT|\c Type::String|All text based data
    |\c BLOB|\c Type::Binary|Raw binary data

    |!QoreType|!SQLite Type|!Description
    |\c int|\c INTEGER|Bound as 64-bit integers
    |\c float|\c FLOAT|Qore float data is converted directly to SQLite float data
    |\c string|\c TEXT|The character encoding is converted to the encoding specified for the connection if necessary
    |\c bool|\c INTEGER|Bound as either \c 0 or \c 1
    |\c date|\c STRING|Date-time values are converted to an ISO-8601 format and stored as strings
    |\c number|\c STRING|Arbitrary-precision numeric data is converted and stored as a string
    |\c binary|\c BLOB|Binary data is stored directly

    @section sqlite3releasenotes Release Notes

    @subsection sqlite_1_1_0 sqlite3 Driver Version 1.1.0
    - added support for the SQL statement API
    - added support for character encoding handling

    @subsection sqlite_1_0 sqlite3 Driver Version 1.0
    - initial release of the driver
*/
